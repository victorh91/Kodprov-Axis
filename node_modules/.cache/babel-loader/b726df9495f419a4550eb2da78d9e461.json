{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/victo/OneDrive/Dokument/IT projekt/Kodprover/Kodprov Axis/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/victo/OneDrive/Dokument/IT projekt/Kodprover/Kodprov Axis/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/Users/victo/OneDrive/Dokument/IT projekt/Kodprover/Kodprov Axis/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\victo\\\\OneDrive\\\\Dokument\\\\IT projekt\\\\Kodprover\\\\Kodprov Axis\\\\src\\\\Sites\\\\devices.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Card from \"react-bootstrap/Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function devices() {\n  _s();\n\n  var _this = this;\n\n  //displays the device info for the right\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      ready = _useState2[0],\n      setReady = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      theArray = _useState4[0],\n      setTheArray = _useState4[1];\n\n  var _useParams = useParams(),\n      id = _useParams.id;\n\n  useEffect(function () {\n    getDevices();\n  }, []);\n\n  function getDevices() {\n    return _getDevices.apply(this, arguments);\n  }\n\n  function _getDevices() {\n    _getDevices = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var uri, thisSiteId, res, posts, array;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              uri = \"http://localhost:3000/devices\";\n              thisSiteId = id;\n              _context.next = 4;\n              return fetch(uri);\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return res.json();\n\n            case 7:\n              posts = _context.sent;\n              array = [];\n              posts.map(function (device) {\n                if (device.site_id == thisSiteId) {\n                  array.push(device);\n                }\n              });\n              setTheArray(array);\n              setReady(true);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getDevices.apply(this, arguments);\n  }\n\n  return ready && /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: theArray.map(function (device, index) {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            width: '22rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n            variant: \"top\",\n            src: device.img\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: device.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: device.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Model: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 17\n              }, _this), \" \", device.model]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Version: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 17\n              }, _this), device.version]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Enabled: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 17\n              }, _this), device.enabled ? \"enabled\" : \"not enabled\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Connected: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 17\n              }, _this), device.connected ? \"connected\" : \"not connected\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Timezone: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 17\n              }, _this), device.timezone]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Storages: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 17\n              }, _this), device.storages.map(function (storage) {\n                return storage.id ? /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [storage.id, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 70,\n                    columnNumber: 23\n                  }, _this), /*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"State: \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 23\n                  }, _this), storage.state]\n                }, storage.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 21\n                }, _this) : null;\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, _this)]\n        }, device.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this);\n}\n\n_s(devices, \"uVNcQ8XSI219Yzc4HXunvvhoVKo=\", false, function () {\n  return [useParams];\n});","map":{"version":3,"sources":["C:/Users/victo/OneDrive/Dokument/IT projekt/Kodprover/Kodprov Axis/src/Sites/devices.js"],"names":["React","useState","useEffect","Link","useParams","Container","Row","Card","devices","ready","setReady","theArray","setTheArray","id","getDevices","uri","thisSiteId","fetch","res","json","posts","array","map","device","site_id","push","index","width","img","title","description","model","version","enabled","connected","timezone","storages","storage","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams } from \"react-router\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nexport default function devices() {\r\n  //displays the device info for the right\r\n  const [ready, setReady] = useState(false);\r\n  const [theArray, setTheArray] = useState();\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    getDevices();\r\n  }, []);\r\n\r\n  async function getDevices() {\r\n    let uri = \"http://localhost:3000/devices\";\r\n    let thisSiteId = id;\r\n    const res = await fetch(uri);\r\n    const posts = await res.json();\r\n    let array = [];\r\n    posts.map((device) => {\r\n      if (device.site_id == thisSiteId) {\r\n        array.push(device);\r\n      }\r\n    });\r\n    setTheArray(array);\r\n    setReady(true);\r\n  }\r\n  return (\r\n    ready && (\r\n      <Container fluid>\r\n        <Row >\r\n        {theArray.map((device, index) => (\r\n            <Card style={{ width: '22rem' }} key={device.id}>\r\n              <Card.Img variant=\"top\" src={device.img} />\r\n          \r\n              <Card.Body>\r\n              <Card.Title>{device.title}</Card.Title>\r\n              <Card.Text>\r\n              {device.description}\r\n              </Card.Text>\r\n              <Card.Text>\r\n                <b>Model: </b> {device.model}\r\n                </Card.Text>\r\n                <Card.Text>\r\n                <b>Version: </b>\r\n                {device.version}\r\n                </Card.Text>\r\n                <Card.Text>\r\n                <b>Enabled: </b>\r\n                {device.enabled ? \"enabled\" : \"not enabled\"}\r\n                </Card.Text>\r\n                <Card.Text>\r\n                <b>Connected: </b>\r\n                {device.connected ? \"connected\" : \"not connected\"}\r\n                </Card.Text>\r\n                <Card.Text>\r\n                <b>Timezone: </b>\r\n                {device.timezone}\r\n                </Card.Text>\r\n\r\n                <Card.Text>\r\n                <b>Storages: </b>\r\n                {device.storages.map((storage) =>\r\n                  storage.id ? (\r\n                    <p key={storage.id}>\r\n                      {storage.id}\r\n                      <br></br>\r\n                      <b>State: </b>\r\n                      {storage.state}\r\n                    </p>\r\n                  ) : null\r\n                )}\r\n              </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n        \r\n        ))}\r\n          </Row>\r\n      </Container>\r\n    )\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}